for (i.rp in tab) {
for (i.gs in tab) {
if (i.hb == "Yes") {
hb = !is.na(data$hb_commonscore)
} else {
hb = T
}
if (i.rp == "Yes") {
rp = !is.na(data$rp_rank)
} else {
rp = T
}
if (i.gs == "Yes") {
gs = !is.na(data$gs_author)
} else {
gs = T
}
i = dim(freq)[1] + 1
freq[i, "HB"] = i.hb
freq[i, "RP"] = i.rp
freq[i, "GS"] = i.gs
if (i.hb == "Yes" | i.rp == "Yes") {
tmp = dim(data[hb & rp & gs, ])[1]
} else {
tmp = ifelse(i.gs == "Yes", 10000, 0)
}
freq[i, "Freq"] = tmp
}
}
}
freq       = freq[order(freq[,1],freq[,2],freq[,3],decreasing = F),]
colgr      = 1+(freq$HB=="Yes")+(freq$RP=="Yes")+(freq$GS=="Yes")
freq$color = grey.colors[colgr]
m          = freq
# setting (font, color) for output, depending on choice
font           = "serif" # Font Times
width          = 24      # width of plot pdf
height         = 13      # height of plot pdf
fontsize_big   = 44      # font size of the main titles
fontsize_small = 30      # font size of the axes
marg           = 9       # margin
fontsize_cells = 30      # font size of cell labels
# mosaic plot of age groups against Ranking groups
png(file = "ARRmosage.png", width = width, height = height, units = "in", res = res, family = font)
mosaic(~HB + RP + GS, data = m, gp = gpar(fill = m$color), shade = TRUE, direction = c("v","h", "h"),
zero_size = 0, labeling = labeling_values,
gp_text = gpar(fontsize = fontsize_cells,fontface = 2, col = grey.colors[2]),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE, margins = unit(c(marg, marg, 1, marg), "lines"), split_vertical = F)
# gp: coloring according to number of merged rankings
dev.off()
# clear variables
rm(list=ls(all=TRUE))
# load library
# Install Packages
libraries = c("vcd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# setting (font, color) for output, depending on choice
font        = "serif" #Helvetica"
res         = 300
max         = 255
grey.colors = c("white",
rgb( 80, 95,108,alpha=108*1.0,maxColorValue = 108),
rgb(  0, 55,108,alpha=140*0.9,maxColorValue = 140),
rgb(  0, 55,108,alpha=180*1.0,maxColorValue = 180)
)
data = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
freq = data.frame()
tab  = c("Yes","No")
for (i.hb in tab) {
for (i.rp in tab) {
for (i.gs in tab) {
if (i.hb == "Yes") {
hb = !is.na(data$hb_commonscore)
} else {
hb = T
}
if (i.rp == "Yes") {
rp = !is.na(data$rp_rank)
} else {
rp = T
}
if (i.gs == "Yes") {
gs = !is.na(data$gs_author)
} else {
gs = T
}
i = dim(freq)[1] + 1
freq[i, "HB"] = i.hb
freq[i, "RP"] = i.rp
freq[i, "GS"] = i.gs
if (i.hb == "Yes" | i.rp == "Yes") {
tmp = dim(data[hb & rp & gs, ])[1]
} else {
tmp = ifelse(i.gs == "Yes", 10000, 0)
}
freq[i, "Freq"] = tmp
}
}
}
freq       = freq[order(freq[,1],freq[,2],freq[,3],decreasing = F),]
colgr      = 1+(freq$HB=="Yes")+(freq$RP=="Yes")+(freq$GS=="Yes")
freq$color = grey.colors[colgr]
m          = freq
# setting (font, color) for output, depending on choice
font           = "serif" # Font Times
width          = 24      # width of plot pdf
height         = 13      # height of plot pdf
fontsize_big   = 44      # font size of the main titles
fontsize_small = 30      # font size of the axes
marg           = 9       # margin
fontsize_cells = 30      # font size of cell labels
# mosaic plot of age groups against Ranking groups
png(file = "ARRmosage.png", width = width, height = height, units = "in", res = res, family = font)
mosaic(~HB + RP + GS, data = m, gp = gpar(fill = m$color), shade = TRUE, direction = c("v","h", "h"),
zero_size = 0, labeling = labeling_values,
gp_text = gpar(fontsize = fontsize_cells,fontface = 2, col = grey.colors[2]),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE, margins = unit(c(marg, marg, 1, marg), "lines"), split_vertical = F)
# gp: coloring according to number of merged rankings
dev.off()
# clear variables
rm(list=ls(all=TRUE))
# load library
# Install Packages
libraries = c("vcd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# setting (font, color) for output, depending on choice
font        = "serif" #Helvetica"
res         = 300
max         = 255
grey.colors = c("white",
rgb( 80, 95,108,alpha=108*1.0,maxColorValue = 108),
rgb(  0, 55,108,alpha=140*0.9,maxColorValue = 140),
rgb(  0, 55,108,alpha=180*1.0,maxColorValue = 180)
)
# load data
data = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
# Computation of frquency table
freq = data.frame()
tab  = c("Yes","No")
for (i.hb in tab) {
for (i.rp in tab) {
for (i.gs in tab) {
if (i.hb == "Yes") {
hb = !is.na(data$hb_commonscore)
} else {
hb = T
}
if (i.rp == "Yes") {
rp = !is.na(data$rp_rank)
} else {
rp = T
}
if (i.gs == "Yes") {
gs = !is.na(data$gs_author)
} else {
gs = T
}
i = dim(freq)[1] + 1
freq[i, "HB"] = i.hb
freq[i, "RP"] = i.rp
freq[i, "GS"] = i.gs
if (i.hb == "Yes" | i.rp == "Yes") {
tmp = dim(data[hb & rp & gs, ])[1]
} else {
tmp = ifelse(i.gs == "Yes", 10000, 0)
}
freq[i, "Freq"] = tmp
}
}
}
freq       = freq[order(freq[,1],freq[,2],freq[,3],decreasing = F),]
colgr      = 1+(freq$HB=="Yes")+(freq$RP=="Yes")+(freq$GS=="Yes")
freq$color = grey.colors[colgr]
m          = freq
# setting (font, color) for output, depending on choice
font           = "serif" # Font Times
width          = 24      # width of plot pdf
height         = 13      # height of plot pdf
fontsize_big   = 44      # font size of the main titles
fontsize_small = 30      # font size of the axes
marg           = 9       # margin
fontsize_cells = 30      # font size of cell labels
# mosaic plot of age groups against Ranking groups
png(file = "ARRmosage.png", width = width, height = height, units = "in", res = res, family = font)
mosaic(~HB + RP + GS, data = m, gp = gpar(fill = m$color), shade = TRUE, direction = c("v","h", "h"),
zero_size = 0, labeling = labeling_values,
gp_text = gpar(fontsize = fontsize_cells,fontface = 2, col = grey.colors[2]),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE, margins = unit(c(marg, marg, 1, marg), "lines"), split_vertical = F)
# gp: coloring according to number of merged rankings
dev.off()
# clear variables
rm(list=ls(all=TRUE))
# load library
# Install Packages
libraries = c("vcd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# setting (font, color) for output, depending on choice
font        = "serif" #Helvetica"
res         = 300
max         = 255
grey.colors = c("white",
rgb( 80, 95,108,alpha=108*1.0,maxColorValue = 108),
rgb(  0, 55,108,alpha=140*0.9,maxColorValue = 140),
rgb(  0, 55,108,alpha=180*1.0,maxColorValue = 180)
)
# load data
data = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
# Computation of frquency table
freq = data.frame()
tab  = c("Yes","No")
for (i.hb in tab) {
for (i.rp in tab) {
for (i.gs in tab) {
if (i.hb == "Yes") {
hb = !is.na(data$hb_commonscore)
} else {
hb = T
}
if (i.rp == "Yes") {
rp = !is.na(data$rp_rank)
} else {
rp = T
}
if (i.gs == "Yes") {
gs = !is.na(data$gs_author)
} else {
gs = T
}
i = dim(freq)[1] + 1
freq[i, "HB"] = i.hb
freq[i, "RP"] = i.rp
freq[i, "GS"] = i.gs
if (i.hb == "Yes" | i.rp == "Yes") {
tmp = dim(data[hb & rp & gs, ])[1]
} else {
tmp = ifelse(i.gs == "Yes", 10000, 0)
}
freq[i, "Freq"] = tmp
}
}
}
freq       = freq[order(freq[,1],freq[,2],freq[,3],decreasing = F),]
colgr      = 1+(freq$HB=="Yes")+(freq$RP=="Yes")+(freq$GS=="Yes")
freq$color = grey.colors[colgr]
m          = freq
# setting (font, color) for output, depending on choice
font           = "serif" # Font Times
width          = 24      # width of plot pdf
height         = 13      # height of plot pdf
fontsize_big   = 44      # font size of the main titles
fontsize_small = 30      # font size of the axes
marg           = 9       # margin
fontsize_cells = 30      # font size of cell labels
# mosaic plot of age groups against Ranking groups
png(file = "ARRmosage1.png", width = width, height = height, units = "in", res = res, family = font)
mosaic(~HB + RP + GS, data = m, gp = gpar(fill = m$color), shade = TRUE, direction = c("v","h", "h"),
zero_size = 0, labeling = labeling_values,
gp_text = gpar(fontsize = fontsize_cells,fontface = 2, col = grey.colors[2]),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE, margins = unit(c(marg, marg, 1, marg), "lines"), split_vertical = F)
# gp: coloring according to number of merged rankings
dev.off()
# clear variables
rm(list=ls(all=TRUE))
# Install Packages
libraries = c("vcd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# define colors
max      = 180
az_red   = rgb(138, 15, 20, alpha = 0.6 * max, maxColorValue = max)
az_green = rgb(0, 87, 44, alpha = 0.65 * max, maxColorValue = max)
az_blue  = rgb(0, 55, 108, alpha = 0.8 * max, maxColorValue = max)
# Setting Image options
font           = "serif" # font Times
fill_color     = c(az_red,az_green,az_blue)
fontsize_big   = 36
fontsize_small = 22
plotsize       = c(16,8)
res            = 300
# load data file
data = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
data = data[!is.na(data$age_combined), ]
subagehb = na.exclude(data[order(data$hb_commonscore, decreasing = T),
grep(pattern = "age_combined|hb_commonscore", colnames(data))])
subagerp = na.exclude(data[order(as.numeric(data$rp_average_rank_score), decreasing = F),
grep(pattern = "age_combined|rp_average_rank_score", colnames(data))])
subagegs = na.exclude(data[order(data$gs_total_cites, decreasing = T),
grep(pattern = "age_combined|gs_total_cites",colnames(data))])
# data selection
m        = 600
len      = min(dim(subagehb)[1],dim(subagegs)[1],dim(subagerp)[1])
if (m<=len)len = m
subagehb = subagehb[1:len,]
subagerp = subagerp[1:len,]
subagegs = subagegs[1:len,]
# computing table for mosaic function
count    = data.frame()
ages     = c(35,40,45,50,55,60,65,70)
index    = 1
data1    = data[!is.na(data$age_combined),]
for (i in 1:(length(ages) + 1)) {
for (rank in c("HB", "RP", "GS")) {
tmp = get(paste0("subage", tolower(rank)))
count[index, "X"] = index
if (i == 1) {
count[index, "Age"] = paste0("<", ages[i])
tmp$age_combined
count[index, "Freq"] = dim(tmp[tmp$age_combined <= ages[i], ])[1]
} else {
count[index, "Age"] = paste0(ages[i - 1] + 1, "-", ages[i])
count[index, "Freq"] = dim(tmp[tmp$age_combined <= ages[i] & tmp$age_combined >
ages[i - 1], ])[1]
}
if (i == length(ages) + 1) {
count[index, "Age"] = paste0(ages[i - 1], ">")
count[index, "Freq"] = dim(tmp[tmp$age_combined > ages[i - 1], ])[1]
}
count[index, "Ranking"] = rank
count[index, "HB"] = ifelse(rank == "HB", yes = "Yes", no = "No")
count[index, "RP"] = ifelse(rank == "RP", yes = "Yes", no = "No")
count[index, "GS"] = ifelse(rank == "GS", yes = "Yes", no = "No")
index = index + 1
}
}
count[count$Age == "<35", "Age"] = "<"
png(file = "ARRmosagegr.png", width = plotsize[1], height = plotsize[2], units = "in",
res = res, family = font)
# mosaic plot of age groups against Ranking groups
mosaic(~Age + Ranking, data = count, margins = unit(8, "lines"),
gp = gpar(fill = matrix(rep(fill_color, times = 9),ncol = 3, byrow = T), col = 9),
shade = TRUE, direction = c("v", "h"), spacing = spacing_highlighting(start = unit(1, "lines")),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE)
dev.off()
## Clear history
rm(list = ls(all = TRUE))
graphics.off()
## Install and load packages
libraries = c("leaflet", "htmlwidgets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# Set working directory
setwd("")
# Read data
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
# Score
data.df$Avg         = as.numeric(data.df$Avg)
data.df             = data.df[data.df$Avg != 0,]
data.df$NoBeer      = as.numeric(data.df$NoBeer)
data.df$NoBeer.size = data.df$NoBeer/max(data.df$NoBeer) * 20 + 1
# Classes for color coding
data.df$Avg.class                     = 0
data.df$Avg.class[data.df$Avg >  4]   = 1
data.df$Avg.class[data.df$Avg <= 4]   = 2
data.df$Avg.class[data.df$Avg <= 3.5] = 3
data.df$Avg.class[data.df$Avg <= 3]   = 4
data.df$Avg.class                     = as.factor(data.df$Avg.class)
# Color palette
pal = colorFactor(colorRampPalette( c("green", "red"), space = "rgb")(4),
domain = c("1", "2", "3", "4"))
# Plot
m  =  leaflet(data = data.df) %>% setView(lng = 10.3833, lat = 50.5167, zoom = 6)
m %>% addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius = ~data.df$NoBeer.size,
popup  = ~paste(Brewery, ": ", NoBeer, " beers", Avg, " as avg score",sep = ""),
color  = ~pal(Avg.class),
stroke = FALSE, fillOpacity = 0.8)
## Clear history
rm(list = ls(all = TRUE))
graphics.off()
## Install and load packages
libraries = c("leaflet", "htmlwidgets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# Set working directory
setwd("")
# Read data
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
# Score
data.df$Avg         = as.numeric(data.df$Avg)
data.df             = data.df[data.df$Avg != 0,]
data.df$NoBeer      = as.numeric(data.df$NoBeer)
data.df$NoBeer.size = data.df$NoBeer/max(data.df$NoBeer) * 20 + 1
# Classes for color coding
data.df$Avg.class                     = 0
data.df$Avg.class[data.df$Avg >  4]   = 1
data.df$Avg.class[data.df$Avg <= 4]   = 2
data.df$Avg.class[data.df$Avg <= 3.5] = 3
data.df$Avg.class[data.df$Avg <= 3]   = 4
data.df$Avg.class                     = as.factor(data.df$Avg.class)
# Color palette
pal = colorFactor(colorRampPalette( c("green", "red"), space = "rgb")(4),
domain = c("1", "2", "3", "4"))
# Plot
m  =  leaflet(data = data.df) %>% setView(lng = 10.3833, lat = 50.5167, zoom = 6)
m %>% addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius = ~data.df$NoBeer.size,
popup  = ~paste(Brewery, ": ", NoBeer, " beers", Avg, " as avg score",sep = ""),
color  = ~pal(Avg.class),
stroke = FALSE, fillOpacity = 0.8)
## Clear history
rm(list = ls(all = TRUE))
graphics.off()
## Install and load packages
libraries = c("leaflet", "htmlwidgets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# Set working directory
setwd("")
# Read data
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
## Clear history
rm(list = ls(all = TRUE))
graphics.off()
## Install and load packages
libraries = c("leaflet", "htmlwidgets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
## Clear history
rm(list = ls(all = TRUE))
graphics.off()
## Install and load packages
libraries = c("leaflet", "htmlwidgets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
getwd
getwd()
setwd("~/")
getwd()
setwd("~/GitHub/XFG-ToDo/XFGtimeseries2")
# clear variables and close windows
rm(list=ls(all=TRUE))
graphics.off()
# open library
install.packages("fExtremes")
library(fExtremes)
# load data
PL   = read.table("XFGPL3.dat")
MMPL = read.table("XFGMMPL3.dat")
# compute VaR for upper tail of the empirical distribution function with alpha = 0.01.
n     = nrow(PL)
j     = 1
VaRSu = NULL
while (j<=n){
Vinput   = t(PL[j,])
temp     = VaR(Vinput, alpha=0.01,type="sample", tail=c("upper"))
VaRSu[j] = temp
j        = j+1
}
# compute VaR for lower tail of the empirical distribution function with alpha = 0.01.
j     = 1
VaRSl = NULL
while (j<=n){
Vinput   = t(PL[j,])
temp     = VaR(Vinput, alpha=0.01,type="sample", tail=c("lower"))
VaRSl[j] = temp
j        = j+1
}
# dummy for time variable
x = 1:nrow(MMPL)
# plot of the time series and its VaR estimates (red lines)
plot(x,t(MMPL),type="p",pch=19,cex=0.15, ylab=paste("Returns*",expression(E-3)), xlab=paste("Time*",expression(E2)), main="VaR Timeplot", axes=F, frame=T, ylim=c(-0.016,0.016))
axis(side=1, at=seq(0,1500,500),labels=seq(0,15,5))
axis(side=2, at=seq(-0.015,0.015,0.005),labels=seq(-15,15,5))
lines(VaRSl,col="red3", lwd=1.5)
lines(VaRSu,col="red3", lwd=1.5)
# QQ-Plot for lower tail
VaRqqplot = function(y,VaR0){
y   = as.vector(MMPL)
bad =(nrow(y)>2)
if(bad==FALSE){ paste("y must be vector or matrix")}
n     = nrow(y)
d     = ncol(y)
h     = 0
w     = matrix(1,1,d)
p     = apply(y*w,1,sum) # portfolio
p     = p[(h+1):n]
qn    = qnorm(((1:(n-h))-0.5)/(n-h),0,1) # compute quantiles of a standard normal
tmp   = p/c(VaR0)
line  = c(min(-4,min(qn),min(tmp)),max(4,max(qn),max(tmp)))
VaRqq = cbind(sort(qn),sort(tmp))
#
dev.new()
qqplot(VaRqq[,1],VaRqq[,2],ylim=c(-4,4),xlim=c(-4,4),pch=19,cex=0.3,col="red3",main="VaR reliability plot", ylab="L/VaR quantiles", xlab="normal quantiles")
lines(line,line,lwd=2)
}
VaRqqplot(MMPL,VaRSl)
