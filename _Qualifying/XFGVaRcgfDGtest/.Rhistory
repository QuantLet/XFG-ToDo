library(devtools)
devtools::install_github("lborke/yamldebugger")
library(yamldebugger)
allKeywords
"plot" %in% allKeywords
help(yaml.debugger.init)
d_init = yaml.debugger.init("c:/test", show_keywords = TRUE)
help(yaml.debugger.get.qnames)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
workdir = "C:/Users/nazaretl.sfb649/Documents/GitHub/XFG-ToDo/_Qualifying"
workdir = "C:/Users/nazaretl.sfb649/Documents/GitHub/XFG-ToDo"
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
# clear variables and close windows
rm(list=ls(all=TRUE))
graphics.off()
# load data
USTF  = read.table("XFGUSTF.dat")
INAAA = read.table("XFGINAAA.dat")
# first observation point
xmin = 1
# last observation point
xmax = nrow(USTF)
# time to maturity
x = c(0.25,0.5,1,2,3,4,5,7,10)
# average USTF
y = apply(USTF[xmin:xmax,4:12],2,mean)
# average INAAA
y = cbind(y,apply(INAAA[xmin:xmax,4:12],2,mean))
# plot averaged government and industry yields
z1 = plot(x,y[,1],col="black", pch=1, lwd=2, ylab="Average Yield in %", xlab="Time to Maturity in Years", ylim=c(4.5,6.8), frame=TRUE, axes=FALSE, main="Yields for Different Risk Levels") # government USTF
axis(side=1, at=seq(0,10,2),labels=seq(0,10,2))
axis(side=2, at=seq(0,10,0.5),labels=seq(0,10,0.5))
z2 = points(x,y[,2],col="red3", lwd=2)    # industry INAAA
setwd("~/GitHub/XFG-ToDo/XFGyields")
# clear variables and close windows
rm(list=ls(all=TRUE))
graphics.off()
# load data
USTF  = read.table("XFGUSTF.dat")
INAAA = read.table("XFGINAAA.dat")
# first observation point
xmin = 1
# last observation point
xmax = nrow(USTF)
# time to maturity
x = c(0.25,0.5,1,2,3,4,5,7,10)
# average USTF
y = apply(USTF[xmin:xmax,4:12],2,mean)
# average INAAA
y = cbind(y,apply(INAAA[xmin:xmax,4:12],2,mean))
# plot averaged government and industry yields
z1 = plot(x,y[,1],col="black", pch=1, lwd=2, ylab="Average Yield in %", xlab="Time to Maturity in Years", ylim=c(4.5,6.8), frame=TRUE, axes=FALSE, main="Yields for Different Risk Levels") # government USTF
axis(side=1, at=seq(0,10,2),labels=seq(0,10,2))
axis(side=2, at=seq(0,10,0.5),labels=seq(0,10,0.5))
z2 = points(x,y[,2],col="red3", lwd=2)    # industry INAAA
setwd("~/GitHub/XFG-ToDo/XFGVaRestMC")
rm(list=ls(all=TRUE))
graphics.off()
# VaRestMC: Partial Monte-Carlo method to calculate the Value at Risk (VaR)
# based on Delta-Gamma Approximation. Possible methods:
#    "PS": Plain vanilla sampling method
#    "MS": Moment matching sampling method
#    "SS": Stratified Latin Hypercube sampling method
#    "IS": Importance sampling method
VaRestMC = function(VaRdelta, VaRgamma, VaRcovmatrix, smethod, alpha, days, nsimu){
if (missing(VaRdelta)){
stop("Please enter a delta vector")
}
if (missing(VaRgamma)){
stop("Please enter a gamma vector")
}
if (missing(VaRcovmatrix)){
stop("Please enter a covariance matrix")
}
if (missing(alpha)){
alpha = 0.01
}
if (missing(days)){
days = 1
}
if (missing(nsimu)){
nsimu = 1000
}
if(missing(smethod)){
smethod = "IS"
}
alpha     = alpha
days      = days
nsimu     = nsimu
delta     = as.matrix(VaRdelta)
gamma     = as.matrix(VaRgamma)
covmatrix = as.matrix(VaRcovmatrix)
n         = nrow(delta)
z = matrix(0,n,nsimu)
for (i in 1:n){
z[i,] = rnorm(nsimu,0,1)
}
chold = function(x){
tmp                    = abs(qr(x)$qr)
tmp[col(tmp)>row(tmp)] = 0
tmp                    = t(tmp)
return(tmp)
}
# cholesky decomposition
covmatrix = days/365*covmatrix
kd        = chold(covmatrix)
d         = diag(diag(kd))
k         = kd -d + diag(rep(1,n))
A         = t(k)%*%sqrt(d)
if (smethod=="PS"){ # "PS": Plain vanilla sampling method
z = A%*%z
i = 1
L = matrix(0, nsimu, 1)
while (i<=nsimu){
L[i,1] = -t(delta)%*%z[,i]-0.5*t(z[,i])%*%gamma%*%z[,i]
i      = i+1
}
VaRMC = quantile(L,(1-alpha))
}else if(smethod=="MS"){ # "MS": Moment matching sampling method
z = (z-matrix(apply(z,1,mean),n,nsimu))/matrix(sqrt(apply(z,1,var)),n,nsimu)  # moment matching sampling method
z = A%*%z
i = 1
L = matrix(0,nsimu,1)
while (i<=nsimu){
L[i,1] = -t(delta)%*%z[,i]-0.5*t(z[,i])%*%gamma%*%z[,i]
i      = i+1
}
VaRMC = quantile(L,(1-alpha))
}else if(smethod=="SS"){ # "SS": Stratified Latin Hypercube sampling method
i = 1
z = matrix(0,n,nsimu)
while (i<=n){
ii = 1
z1 = runif(nsimu,0,1)
z2 = 1:nsimu
z3 = cbind(z1,z2)
z3 = z3[order(z3[,1]),]
while (ii<=nsimu){
z[i,ii] = qnorm((z3[ii,2]+runif(1)-1)/nsimu) #stratified latin hypercube sampling method
ii      = ii+1
}
i  = i+1
}
z = A%*%z
i = 1
L = matrix(0,nsimu,1)
while (i<=nsimu){
L[i,1] = -t(delta)%*%z[,i]-0.5*t(z[,i])%*%gamma%*%z[,i]
i      = i+1
}
VaRMC = quantile(L,(1-alpha))
}else if(smethod=="IS"){ # "IS": Importance sampling method
# 1. Decompostion Process
tem    = -0.5*t(A)%*%gamma%*%A
vx     = eigen(tem)
V      = vx$vectors
lambda = vx$values
C      = A%*%V
b      = t(-t(delta)%*%C)
# 2. Use Newton-Raphson method to find solution for theta
theta = 0
ac    = 1
i     = 1
di    = 1
# use Delta normal method to set initial guest of x
x     = -qnorm(alpha)*sqrt(sum(b^2))
while ( i<=1000)  { #(ac<=-0.0001 || ac>=0.0001) &&
ac    = sum((theta*b^2*(1-theta*lambda))/((1-2*theta*lambda)^2)+lambda/(1-2*theta*lambda))-x
di    = sum(b^2/(1-2*theta*lambda)+2*lambda^2/(1-2*theta*lambda)^2+4*theta*lambda*b^2*(1-theta*lambda)/(1-2*theta*lambda)^3)
theta = theta-ac/di
i     = i+1
}
# 3. set sig and mu
sig = solve(diag(rep(1,n))-2*theta*diag(lambda))
mu  = theta*sig%*%b
# 4. Simulation
z  = matrix(mu,n,nsimu)+sqrt(sig)%*%z
cs = C%*%z
L  = matrix(0,nsimu,1)
W  = matrix(0,nsimu,1)
# To calculate the value for moment generating function
psi = 0.5*sum((theta*b)^2/(1-2*theta*lambda)-log(1-2*theta*lambda))
i   = 1
while (i<=nsimu){
L[i,1] = t(-delta)%*%cs[,i]+t(cs[,i])%*%-(gamma)%*%cs[,i]*0.5
W[i,1] = exp(-theta*L[i,1]+psi)
i      = i+1
}
WL    = cbind(W,L)
Wtem  = cumsum(sort(W))/nsimu
WL    = WL[order(WL[,1]),]
nr    = length(which(Wtem<=alpha))
VaRMC = WL[nr,2]
}
return(VaRMC)
}
# Main program
set.seed(100)
VaRdelta     = read.table("VaRdelta.dat")
VaRgamma     = read.table("VaRgamma.dat")
VaRcovmatrix = read.table("VaRcovmatrix.dat")
alpha        = 0.01
days         = 1
nsimu        = 1000
#    "PS": Plain vanilla sampling method
#    "MS": Moment matching sampling method
#    "SS": Stratified Latin Hypercube sampling method
#    "IS": Importance sampling method
VaRMC        = VaRestMC(VaRdelta, VaRgamma, VaRcovmatrix,smethod="IS",alpha,days,nsimu)
VaRMC
setwd("~/GitHub/XFG-ToDo/XFGVaRcgfDGtest")
rm(list=ls(all=TRUE))
graphics.off()
############################ SUBROUTINE ################################
VaRcgfDG = function(t,par){ # cumulant generating function (cgf) for the
#              class of quadratic forms of Gaussian vectors.
compl = function (re, im){ # Complex array generation
if(missing(re)){
stop("compl: no composed object for real part")
}
if(missing(im)){
im = 0*(re<=Inf)
}
if(nrow(matrix(re))!=nrow(matrix(im))){
stop("compl: dim(re)<>dim(im)")
}
z = list()
z$re = re
z$im = im
return(z)
}
s = compl(par$theta*t$re, par$theta*t$im)
cmul = function(x, y){ # Complex multiplication
re   = x$re*y$re - x$im*y$im
im   = x$re*y$im + x$im*y$re
z    = list()
z$re = re
z$im = im
return(z)
}
cdiv = function(x, y) { # Complex division
w    = y$re^2 + y$im^2
re   = (x$re*y$re + x$im*y$im) / w
im   = (x$im*y$re - x$re*y$im) / w
z    = list()
z$re = re
z$im = im
return(z)
}
cln = function(x){ # Complex natural logarithm
re   = log(x$re^2+x$im^2) / 2
im   = atan2(x$im, x$re)
z    = list()
z$re = re
z$im = im
return(z)
}
csub = function(x, y){# Complex subtraction two arrays of complex numbers
re   = x$re - y$re
im   = x$im - y$im
z    = list()
z$re = re
z$im = im
return(z)
}
i = 1
m = length(par$lambda)
while (i <= m){
# 1-lambda*t:
omlt = compl(1 - par$lambda[i] * t$re,  -par$lambda[i] * t$im)
tmp  = cmul(t,t)
tmp  = cdiv(tmp,omlt)
tmp  = compl(par$delta[i]^2 * tmp$re, par$delta[i]^2 * tmp$im)
tmp  = csub(tmp,cln(omlt))
s    = compl(s$re + 0.5*tmp$re, s$im + 0.5*tmp$im)
i    = i+1
}
return(s)
}
compl = function (re, im){ # Complex array generation
if(missing(re)){
stop("compl: no composed object for real part")
}
if(missing(im)){
im = 0*(re<=Inf)
}
if(nrow(matrix(re))!=nrow(matrix(im))){
stop("compl: dim(re)<>dim(im)")
}
z = list()
z$re = re
z$im = im
return(z)
}
############################ Main Program ############################
XFGVaRcgfDGtest = function(par,n,xlim){ # test function
dt = (xlim[2]-xlim[1])/(n-1)
t  = xlim[1] + (0:(n-1))*dt
r = VaRcgfDG(compl(t,t*0),par)
z1 = cbind(t,r$re)
plot(z1,type="l",col="blue3",lwd=2, xlab="X",ylab="Y")
title("Cumulant generating function")
}
theta      = 0
delta      = c(1)
lambda     = c(0.1)
par        = list()
par$theta  = theta
par$delta  = delta
par$lambda = lambda
XFGVaRcgfDGtest(par,100,c(-2,2))
